package ui{import utils.ScoreKeeper;import starling.display.Button;import starling.display.Sprite;import starling.events.Event;import starling.text.TextField;import starling.utils.Align;import treefortress.sound.SoundAS;use namespace SoundAS;public class Hud extends Sprite{	// set by incoming params	private var _gameScope:Play;	//private var _controllerScope:ScreenManager;	private var _scoreKeeper:ScoreKeeper = ScoreKeeper.getInstance();	private var _arrayBtns:Array;	// objects on stage	public var button_pause:Button;	public var button_sound:Button;	public var txt_score:TextField;	public var txt_lives:TextField;    public var txt_levels:TextField;	public function Hud()	{		//	}	// INIT/KILL FUNCS ---------------------------------------------	public function init( play:Play ):void	{		_gameScope = play;		//_controllerScope = data.controllerScope;		button_pause = new Button(Root.assets.getTexture("btn_pause1"));		addChild(button_pause);		button_pause.x = 0;		button_pause.y = 0;        txt_score = new TextField(button_pause.width * 2.5, button_pause.height, "000000");        txt_score.format.setTo(Constants.DEFAULT_FONT_2, 18, 0xc9d3d2);        txt_score.format.bold = true;        txt_score.format.horizontalAlign = Align.RIGHT;        txt_score.format.verticalAlign = Align.BOTTOM;		txt_score.x = stage.stageWidth - button_pause.width * 4.0;		addChild(txt_score);        txt_levels = new TextField(button_pause.width * 3.0, button_pause.height, "LEVEL" + zeroPad(_gameScope._level, 2));        txt_levels.format.setTo(Constants.DEFAULT_FONT_2, 18, 0xc9d3d2);        txt_levels.format.bold = true;        txt_levels.format.horizontalAlign = Align.CENTER;        txt_levels.format.verticalAlign = Align.BOTTOM;        txt_levels.x = (stage.stageWidth - button_pause.width * 2.5) >> 1;        addChild(txt_levels);        txt_lives = new TextField(button_pause.width * 2.5, button_pause.height, "LIVES" + zeroPad(_scoreKeeper.lives, 2));        txt_lives.format.setTo(Constants.DEFAULT_FONT_2, 18, 0xc9d3d2);        txt_lives.format.bold = true;        txt_lives.format.horizontalAlign = Align.CENTER;        txt_lives.format.verticalAlign = Align.BOTTOM;        txt_lives.x = button_pause.x + button_pause.width * 1.5;        addChild(txt_lives);		button_sound = new Button(Root.assets.getTexture("soundon"));		addChild(button_sound);		button_sound.x = stage.stageWidth - button_sound.width;		button_sound.y = 0;		enable_btns();		setState_soundBtn();	}	public override function dispose():void	{		removeChild( button_pause, true );		removeChild(button_sound, true);		removeChild( txt_score, true);		removeChild( txt_lives, true);        removeChild( txt_levels, true);		_arrayBtns = [];		super.dispose();	}	public function kill():void	{		disable_btns();		_gameScope = null;		//_controllerScope = null;		_scoreKeeper = null;	}	// called by ConnectPlayers.as, set player 1 and player 2 health bars	public function set assignPlayerHealth( arg:Number ):void	{		switch( arg )		{			case 1:				//_health_player = health_player1;				//_health_opponent = health_player2;				break;			case 2:				//_health_player = health_player2;				//_health_opponent = health_player1;				break;		}	}	// SCORE ---------------------------------------------	// called by Game.as	public function zeroPad(number:int, width:int):String {		var ret:String = ""+number;		while( ret.length < width )			ret="0" + ret;		return ret;	}	public function updateScore():void	{		txt_score.text = zeroPad(_scoreKeeper.score, 6);	}	public function updateLives():void	{		txt_lives.text = "LIVES" + zeroPad(_scoreKeeper.lives, 2);	}    public function updateLevels():void    {        txt_levels.text = "LEVEL" + zeroPad(_gameScope._level, 2);    }	// BTN FUNCS ---------------------------------------------	private function onButtonTriggered( event:Event ):void	{		switch( event.currentTarget )		{			case button_pause:				if( !Constants.IS_GAME_PAUSED )				{					_gameScope.pauseGame(true);				}else{					_gameScope.resumeGame();				}				// note: "Constants.IS_GAME_PAUSED" var is set by Game.as, "pauseGameEngine" and "resumeGame" funcs				break;			case button_sound:				//sound mute on off					if(Root.mute)					{						SoundAS.mute = false;						Root.mute = false;					}					else					{						SoundAS.mute = true;						Root.mute = true;					}					setState_soundBtn();				break;		}	}	private function enable_btns():void	{		_arrayBtns = [ button_pause, button_sound ];		for each( var btn:Button in _arrayBtns)		{			btn.addEventListener(Event.TRIGGERED, onButtonTriggered);		}	}	private function disable_btns():void	{		for each( var btn:Button in _arrayBtns)		{			btn.removeEventListener( Event.TRIGGERED, onButtonTriggered );		}		_arrayBtns = [];	}	// called by Game.as, if resume was initiated via click on pause panel	public function setState_pauseBtn():void	{		if( Constants.IS_GAME_PAUSED )		{			button_pause.upState = Root.assets.getTexture("btn_restart1");		}else button_pause.upState = Root.assets.getTexture("btn_pause1");	}	public function setState_soundBtn():void	{		if( Root.mute )		{			button_sound.upState = Root.assets.getTexture("soundoff");		}else button_sound.upState = Root.assets.getTexture("soundon");	}}}