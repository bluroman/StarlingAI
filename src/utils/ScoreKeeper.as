package utils{import flash.net.SharedObject;import starling.core.Starling;import starling.textures.ConcreteTexture;public class ScoreKeeper	{    		private static var _instance:ScoreKeeper = null;        private var _health:int = 100;		private var _lives:int = 3;		private var _score:int = 0;		private var _highScore:int = 0;		private var _opponentScore:int = 0;        private var _enemyKilled:int = 0;        private var _killedTotal:int = 0;		private var _isWinner:Boolean = false;						//private var _controller:ScreenManager;		private var sharedHiScore:SharedObject;        private var sharedEnemyKilled:SharedObject;		        				public function ScoreKeeper(sE:SingletonEnforcer )		{            //trace('new instance of ScoreKeeper singleton created');			sharedHiScore = SharedObject.getLocal("hiScores");			if (sharedHiScore.data.score==undefined) {				sharedHiScore.data.score = 0;				trace("No High Score found");			}			else {				trace("Current High Score: "+sharedHiScore.data.score);			}			_highScore = sharedHiScore.data.score;			sharedHiScore.close();            sharedEnemyKilled = SharedObject.getLocal("enemyKilled");            if (sharedEnemyKilled.data.num==undefined) {                sharedEnemyKilled.data.num = 0;                trace("No EnemyKilled found");            }            else {                trace("Current Enemy Killed: "+sharedEnemyKilled.data.num);            }            _killedTotal = sharedEnemyKilled.data.num;            sharedEnemyKilled.close();        }        		public static function getInstance():ScoreKeeper		{            if( _instance == null )			{                _instance = new ScoreKeeper( new SingletonEnforcer() );            }            return _instance;        }        				// RESET SCORE FOR NEW GAME ----------------------------------------				public function resetScore():void		{			_lives = 3;		   _health = 100;		   _score = 0;		   _opponentScore = 0;		   _isWinner = false;            _enemyKilled = 0;        }						// GETTERS ----------------------------------------				public function get score():Number		{            return _score;        }				public function get health():int		{			return _health;		}				public function get opponentScore():int		{			return _opponentScore;		}				// accessed by ConnectPlayer.as		public function get isWinner():Boolean		{			return _isWinner;		}		public function get lives():Number		{			return _lives;		}		public function get highScore():int		{			return _highScore;		}        						// SETTERS ----------------------------------------		//		public function set controllerScope( arg:ScreenManager ):void//		{//			_controller = arg;//		}    public function set enemyKilled( arg:int ):void    {        _enemyKilled += arg;        trace("enemyKilled:" + _enemyKilled);        if (_enemyKilled > _killedTotal) {            trace("NEW RECORDS Total Killed:" + _enemyKilled);            sharedEnemyKilled = SharedObject.getLocal("enemyKilled");            sharedEnemyKilled.data.num = _enemyKilled;            _killedTotal = _enemyKilled;//            if(_killedTotal == 100)//                _controller.submitAchievement(Constants.ACH_100_DOWN, 1);//            else if(_killedTotal == 50)//                _controller.submitAchievement(Constants.ACH_50_DOWN, 1);//            else if(_killedTotal == 20)//                _controller.submitAchievement(Constants.ACH_20_DOWN, 1);//            else if(_killedTotal == 10)//                _controller.submitAchievement(Constants.ACH_10_DOWN, 1);//            else if(_killedTotal == 1)//                _controller.submitAchievement(Constants.ACH_FIRST_STEP, 1);            sharedEnemyKilled.close();        }    }				public function set scoreIncrease( arg:int ):void		{			_score += arg;            trace("score:" + _score + "hiscore:" + _highScore);			if (_score > _highScore) {				trace("CONGRATULATIONS!! NEW HISCORE");				sharedHiScore = SharedObject.getLocal("hiScores");				sharedHiScore.data.score = _score;				_highScore = _score;                //_controller.submitScore(_highScore);				sharedHiScore.close();			}		}					public function set healthDecrease( arg:int ):void		{			_health -= arg;						if( _health <= 0 )			{                //dispatchEventWith(Menu.LOSE_SCREEN, true);				//_controller.gameOver( {isWinner:_isWinner} );			}		}		public function set livesLost(arg:int):void		{			_lives -= arg;			if( _lives <= 0 )			{                //dispatchEventWith(Menu.LOSE_SCREEN, true);				//_controller.gameOver( {isWinner:_isWinner} );			}		}				public function set opponentScore( arg:int ):void		{			_opponentScore = arg;		}		public function set highScore(arg:int):void		{			_highScore = arg;		}    }} // outside the package, can only be access internallyclass SingletonEnforcer{	//}